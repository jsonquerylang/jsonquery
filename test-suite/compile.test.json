{
  "source": "https://github.com/jsonquerylang/jsonquery/blob/v5.0.0/test-suite/compile.test.json",
  "version": "5.0.0",
  "groups": [
    {
      "category": "value",
      "description": "should get a string",
      "tests": [{ "input": null, "query": "Hello", "output": "Hello" }]
    },
    {
      "category": "value",
      "description": "should get a number",
      "tests": [{ "input": null, "query": 2.4, "output": 2.4 }]
    },
    {
      "category": "value",
      "description": "should get a boolean (true)",
      "tests": [{ "input": null, "query": true, "output": true }]
    },
    {
      "category": "value",
      "description": "should get a boolean (false)",
      "tests": [{ "input": null, "query": false, "output": false }]
    },
    {
      "category": "value",
      "description": "should get null",
      "tests": [{ "input": null, "query": null, "output": null }]
    },
    {
      "category": "pipe",
      "description": "should execute a pipe",
      "tests": [
        {
          "input": [{ "user": { "name": "Joe" } }],
          "query": ["pipe", ["get", 0], ["get", "user"], ["get", "name"]],
          "output": "Joe"
        },
        {
          "input": [1, -2, 3],
          "query": ["pipe", ["filter", ["gte", ["get"], 0]], ["sum"]],
          "output": 4
        }
      ]
    },
    {
      "category": "pipe",
      "description": "should execute an empty pipe",
      "tests": [
        {
          "input": [1, 2, 3],
          "query": ["pipe"],
          "output": [1, 2, 3]
        }
      ]
    },
    {
      "category": "object",
      "description": "should create a static object",
      "tests": [
        {
          "input": null,
          "query": ["object", { "a": 2, "b": 3 }],
          "output": { "a": 2, "b": 3 }
        }
      ]
    },
    {
      "category": "object",
      "description": "should create a dynamic object with getters",
      "tests": [
        {
          "input": { "name": "Joe", "age": 23, "city": "New York" },
          "query": ["object", { "firstName": ["get", "name"], "age": ["get", "age"] }],
          "output": { "firstName": "Joe", "age": 23 }
        }
      ]
    },
    {
      "category": "object",
      "description": "should create an object containing null and false",
      "tests": [
        {
          "input": null,
          "query": ["object", { "nothing": null, "false": false }],
          "output": { "nothing": null, "false": false }
        }
      ]
    },
    {
      "category": "object",
      "description": "should create an object containing pipelines",
      "tests": [
        {
          "input": [1, -2, 3],
          "query": [
            "object",
            {
              "total": ["pipe", ["filter", ["gte", ["get"], 0]], ["sum"]]
            }
          ],
          "output": { "total": 4 }
        }
      ]
    },
    {
      "category": "array",
      "description": "should create a static array",
      "tests": [
        {
          "input": null,
          "query": ["array", 1, 2, 3],
          "output": [1, 2, 3]
        }
      ]
    },
    {
      "category": "array",
      "description": "should create a dynamic array",
      "tests": [
        {
          "input": { "name": "Joe", "age": 23, "city": "New York" },
          "query": ["array", ["get", "name"], ["get", "age"]],
          "output": ["Joe", 23]
        },
        {
          "input": null,
          "query": ["array", ["add", 10, 9], 23],
          "output": [19, 23]
        }
      ]
    },
    {
      "category": "get",
      "description": "should get a path with a single property as string",
      "tests": [
        {
          "input": { "name": "Joe" },
          "query": ["get", "name"],
          "output": "Joe"
        }
      ]
    },
    {
      "category": "get",
      "description": "should get the full object itself",
      "tests": [
        {
          "input": { "name": "Joe" },
          "query": ["get"],
          "output": { "name": "Joe" }
        }
      ]
    },
    {
      "category": "get",
      "description": "should return null in case of a non-existing path",
      "tests": [
        {
          "input": {},
          "query": ["get", "foo", "bar"],
          "output": null
        },
        {
          "input": [1, 2, 3],
          "query": ["get", 5],
          "output": null
        }
      ]
    },
    {
      "category": "get",
      "description": "should get a path using function get",
      "tests": [
        {
          "input": { "name": "Joe" },
          "query": ["get", "name"],
          "output": "Joe"
        }
      ]
    },
    {
      "category": "get",
      "description": "should get a value 0",
      "tests": [
        {
          "input": { "value": 0 },
          "query": ["get", "value"],
          "output": 0
        }
      ]
    },
    {
      "category": "get",
      "description": "should get a nested value 0",
      "tests": [
        {
          "input": { "nested": { "value": 0 } },
          "query": ["get", "nested", "value"],
          "output": 0
        }
      ]
    },
    {
      "category": "get",
      "description": "should get a value false",
      "tests": [
        {
          "input": { "value": false },
          "query": ["get", "value"],
          "output": false
        }
      ]
    },
    {
      "category": "get",
      "description": "should get a path that has the same name as a function",
      "tests": [
        {
          "input": { "sort": "Joe" },
          "query": ["get", "sort"],
          "output": "Joe"
        }
      ]
    },
    {
      "category": "get",
      "description": "should get a nested value that has the same name as a function",
      "tests": [
        {
          "input": { "sort": { "name": "Joe" } },
          "query": ["get", "sort", "name"],
          "output": "Joe"
        }
      ]
    },
    {
      "category": "get",
      "description": "should get an item from an array",
      "tests": [
        {
          "input": ["A", "B", "C"],
          "query": ["get", 1],
          "output": "B"
        },
        {
          "input": { "arr": ["A", "B", "C"] },
          "query": ["get", "arr", 1],
          "output": "B"
        },
        {
          "input": [{ "text": "A" }, { "text": "B" }, { "text": "C" }],
          "query": ["get", 1, "text"],
          "output": "B"
        }
      ]
    },
    {
      "category": "filter",
      "description": "should filter an array with booleans and null",
      "tests": [
        {
          "input": [
            { "id": 1, "admin": true },
            { "id": 2 },
            { "id": 3, "admin": true },
            { "id": 4, "admin": false }
          ],
          "query": ["filter", ["get", "admin"]],
          "output": [{ "id": 1, "admin": true }, { "id": 3, "admin": true }]
        }
      ]
    },
    {
      "category": "filter",
      "description": "should filter an array with numbers",
      "tests": [
        {
          "input": [-1, 0, 1, 2, 3],
          "query": ["filter", ["get"]],
          "output": [-1, 1, 2, 3]
        }
      ]
    },
    {
      "category": "filter",
      "description": "should filter an array with strings",
      "tests": [
        {
          "input": ["hello", "", "world", " "],
          "query": ["filter", ["get"]],
          "output": ["hello", "", "world", " "]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort an array with numbers",
      "tests": [
        {
          "input": [5, 2, 3],
          "query": ["sort"],
          "output": [2, 3, 5]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort an array with numbers (asc)",
      "tests": [
        {
          "input": [5, 2, 3],
          "query": ["sort", ["get"], "asc"],
          "output": [2, 3, 5]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort an array with numbers (desc)",
      "tests": [
        {
          "input": [5, 2, 3],
          "query": ["sort", ["get"], "desc"],
          "output": [5, 3, 2]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort an array with strings",
      "tests": [
        {
          "input": ["C", "c", "b", "a", "B", "A"],
          "query": ["sort"],
          "output": ["A", "B", "C", "a", "b", "c"]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort an array with booleans",
      "tests": [
        { "input": [true, false], "query": ["sort"], "output": [false, true] },
        { "input": [false, true], "query": ["sort"], "output": [false, true] },
        {
          "input": [false, true, false, true],
          "query": ["sort"],
          "output": [false, false, true, true]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort an array with objects",
      "tests": [
        {
          "input": [{ "score": -2 }, { "score": 5 }, { "score": 3 }],
          "query": ["sort", ["get", "score"]],
          "output": [{ "score": -2 }, { "score": 3 }, { "score": 5 }]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort an array with objects (desc)",
      "tests": [
        {
          "input": [{ "score": -2 }, { "score": 5 }, { "score": 3 }],
          "query": ["sort", ["get", "score"], "desc"],
          "output": [{ "score": 5 }, { "score": 3 }, { "score": -2 }]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should leave content as-is when trying to sort nested arrays",
      "tests": [
        {
          "input": [[3], [1], [2]],
          "query": ["sort"],
          "output": [[3], [1], [2]]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should leave content as-is when trying to sort nested objects",
      "tests": [
        {
          "input": [{ "a": 1 }, { "c": 3 }, { "b": 2 }],
          "query": ["sort"],
          "output": [{ "a": 1 }, { "c": 3 }, { "b": 2 }]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort mixed types (boolean, number, string, other)",
      "tests": [
        { "input": [true, 0], "query": ["sort"], "output": [true, 0] },
        { "input": [0, false], "query": ["sort"], "output": [false, 0] },
        { "input": [2.4, true], "query": ["sort"], "output": [true, 2.4] },
        { "input": [3, "B"], "query": ["sort"], "output": [3, "B"] },
        { "input": ["B", 3], "query": ["sort"], "output": [3, "B"] },
        { "input": ["A", true], "query": ["sort"], "output": [true, "A"] },
        { "input": [2, [1]], "query": ["sort"], "output": [2, [1]] },
        { "input": [[1], 2], "query": ["sort"], "output": [2, [1]] },
        { "input": [{ "id": 0 }, 2], "query": ["sort"], "output": [2, { "id": 0 }] },
        { "input": [2, { "id": 0 }, 3], "query": ["sort"], "output": [2, 3, { "id": 0 }] },
        {
          "input": [{ "id": 2 }, { "id": 1 }],
          "query": ["sort"],
          "output": [{ "id": 2 }, { "id": 1 }]
        },
        { "input": [{ "id": 0 }, [1]], "query": ["sort"], "output": [{ "id": 0 }, [1]] },
        { "input": [[1], { "id": 0 }], "query": ["sort"], "output": [[1], { "id": 0 }] },
        { "input": [[2], [1]], "query": ["sort"], "output": [[2], [1]] },
        {
          "input": [3, "B", true, -1, false, { "id": 2 }, "A", [3], { "id": 1 }, [2], 2],
          "query": ["sort"],
          "output": [false, true, -1, 2, 3, "A", "B", { "id": 2 }, [3], { "id": 1 }, [2]]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort mixed types (boolean, number, string, other) in ASC order",
      "tests": [
        { "input": [true, 0], "query": ["sort", ["get"], "asc"], "output": [true, 0] },
        { "input": [0, false], "query": ["sort", ["get"], "asc"], "output": [false, 0] },
        { "input": [2.4, true], "query": ["sort", ["get"], "asc"], "output": [true, 2.4] },
        { "input": [3, "B"], "query": ["sort", ["get"], "asc"], "output": [3, "B"] },
        { "input": ["B", 3], "query": ["sort", ["get"], "asc"], "output": [3, "B"] },
        { "input": ["A", true], "query": ["sort", ["get"], "asc"], "output": [true, "A"] },
        { "input": [2, [1]], "query": ["sort", ["get"], "asc"], "output": [2, [1]] },
        { "input": [[1], 2], "query": ["sort", ["get"], "asc"], "output": [2, [1]] },
        {
          "input": [{ "id": 0 }, 2],
          "query": ["sort", ["get"], "asc"],
          "output": [2, { "id": 0 }]
        },
        {
          "input": [2, { "id": 0 }, 3],
          "query": ["sort", ["get"], "asc"],
          "output": [2, 3, { "id": 0 }]
        },
        {
          "input": [{ "id": 2 }, { "id": 1 }],
          "query": ["sort", ["get"], "asc"],
          "output": [{ "id": 2 }, { "id": 1 }]
        },
        {
          "input": [{ "id": 0 }, [1]],
          "query": ["sort", ["get"], "asc"],
          "output": [{ "id": 0 }, [1]]
        },
        {
          "input": [[1], { "id": 0 }],
          "query": ["sort", ["get"], "asc"],
          "output": [[1], { "id": 0 }]
        },
        { "input": [[2], [1]], "query": ["sort", ["get"], "asc"], "output": [[2], [1]] },
        {
          "input": [3, "B", true, -1, false, { "id": 2 }, "A", [3], { "id": 1 }, [2], 2],
          "query": ["sort", ["get"], "asc"],
          "output": [false, true, -1, 2, 3, "A", "B", { "id": 2 }, [3], { "id": 1 }, [2]]
        }
      ]
    },
    {
      "category": "sort",
      "description": "should sort mixed types (boolean, number, string, other) in DESC order",
      "tests": [
        { "input": [true, 0], "query": ["sort", ["get"], "desc"], "output": [0, true] },
        { "input": [0, false], "query": ["sort", ["get"], "desc"], "output": [0, false] },
        { "input": [2.4, true], "query": ["sort", ["get"], "desc"], "output": [2.4, true] },
        { "input": [3, "B"], "query": ["sort", ["get"], "desc"], "output": ["B", 3] },
        { "input": ["B", 3], "query": ["sort", ["get"], "desc"], "output": ["B", 3] },
        { "input": ["A", true], "query": ["sort", ["get"], "desc"], "output": ["A", true] },
        { "input": [2, [1]], "query": ["sort", ["get"], "desc"], "output": [[1], 2] },
        { "input": [[1], 2], "query": ["sort", ["get"], "desc"], "output": [[1], 2] },
        {
          "input": [{ "id": 0 }, 2],
          "query": ["sort", ["get"], "desc"],
          "output": [{ "id": 0 }, 2]
        },
        {
          "input": [2, { "id": 0 }, 3],
          "query": ["sort", ["get"], "desc"],
          "output": [{ "id": 0 }, 3, 2]
        },
        {
          "input": [{ "id": 2 }, { "id": 1 }],
          "query": ["sort", ["get"], "desc"],
          "output": [{ "id": 2 }, { "id": 1 }]
        },
        {
          "input": [{ "id": 0 }, [1]],
          "query": ["sort", ["get"], "desc"],
          "output": [{ "id": 0 }, [1]]
        },
        {
          "input": [[1], { "id": 0 }],
          "query": ["sort", ["get"], "desc"],
          "output": [[1], { "id": 0 }]
        },
        { "input": [[2], [1]], "query": ["sort", ["get"], "desc"], "output": [[2], [1]] },
        {
          "input": [3, "B", true, -1, false, { "id": 2 }, "A", [3], { "id": 1 }, [2], 2],
          "query": ["sort", ["get"], "desc"],
          "output": [{ "id": 2 }, [3], { "id": 1 }, [2], "B", "A", 3, 2, -1, true, false]
        }
      ]
    },
    {
      "category": "reverse",
      "description": "should reverse an array",
      "tests": [
        {
          "input": [4, 2, 3],
          "query": ["reverse"],
          "output": [3, 2, 4]
        }
      ]
    },
    {
      "category": "reverse",
      "description": "should reverse an array without altering the original array",
      "tests": [
        {
          "input": [4, 2, 3],
          "query": ["object", { "a": ["reverse"], "b": ["reverse"] }],
          "output": { "a": [3, 2, 4], "b": [3, 2, 4] }
        }
      ]
    },
    {
      "category": "pick",
      "description": "should pick one property from an object",
      "tests": [
        {
          "input": { "name": "Joe", "age": 23, "city": "New York" },
          "query": ["pick", ["get", "name"]],
          "output": { "name": "Joe" }
        }
      ]
    },
    {
      "category": "pick",
      "description": "should pick multiple properties from an object",
      "tests": [
        {
          "input": { "name": "Joe", "age": 23, "city": "New York" },
          "query": ["pick", ["get", "name"], ["get", "city"]],
          "output": { "name": "Joe", "city": "New York" }
        }
      ]
    },
    {
      "category": "pick",
      "description": "should pick nested properties from an object",
      "tests": [
        {
          "input": {
            "name": "Joe",
            "age": 23,
            "address": { "city": "New York" }
          },
          "query": ["pick", ["get", "name"], ["get", "address", "city"]],
          "output": { "name": "Joe", "city": "New York" }
        }
      ]
    },
    {
      "category": "pick",
      "description": "should pick one property from an array",
      "tests": [
        {
          "input": [
            { "name": "Joe", "age": 23, "city": "New York" },
            { "name": "Sarah", "age": 21, "city": "Amsterdam" }
          ],
          "query": ["pick", ["get", "name"]],
          "output": [{ "name": "Joe" }, { "name": "Sarah" }]
        }
      ]
    },
    {
      "category": "pick",
      "description": "should pick multiple properties from an array",
      "tests": [
        {
          "input": [
            { "name": "Joe", "age": 23, "city": "New York" },
            { "name": "Sarah", "age": 21, "city": "Amsterdam" }
          ],
          "query": ["pick", ["get", "name"], ["get", "city"]],
          "output": [
            { "name": "Joe", "city": "New York" },
            { "name": "Sarah", "city": "Amsterdam" }
          ]
        }
      ]
    },
    {
      "category": "pick",
      "description": "should pick nested properties from an array",
      "tests": [
        {
          "input": [
            { "name": "Joe", "age": 23, "address": { "city": "New York" } },
            { "name": "Sarah", "age": 21, "address": { "city": "Amsterdam" } }
          ],
          "query": ["pick", ["get", "name"], ["get", "address", "city"]],
          "output": [
            { "name": "Joe", "city": "New York" },
            { "name": "Sarah", "city": "Amsterdam" }
          ]
        }
      ]
    },
    {
      "category": "map",
      "description": "should map an array with objects",
      "tests": [
        {
          "input": [
            { "name": "Joe", "age": 23 },
            { "name": "Oliver", "age": 27 },
            { "name": "Sarah", "age": 21 }
          ],
          "query": ["map", ["get", "name"]],
          "output": ["Joe", "Oliver", "Sarah"]
        }
      ]
    },
    {
      "category": "map",
      "description": "should map an array with numbers",
      "tests": [
        {
          "input": [3, -4, 1, -7],
          "query": ["map", ["abs", ["get"]]],
          "output": [3, 4, 1, 7]
        }
      ]
    },
    {
      "category": "mapObject",
      "description": "should map the entries of an object",
      "tests": [
        {
          "input": { "a": 2, "b": 3 },
          "query": [
            "mapObject",
            [
              "object",
              {
                "key": ["add", "#", ["get", "key"]],
                "value": ["add", ["get", "key"], ["get", "value"]]
              }
            ]
          ],
          "output": { "#a": "a2", "#b": "b3" }
        }
      ]
    },
    {
      "category": "mapKeys",
      "description": "should map the keys of an object",
      "tests": [
        {
          "input": { "a": 2, "b": 3 },
          "query": ["mapKeys", ["add", "#", ["get"]]],
          "output": { "#a": 2, "#b": 3 }
        }
      ]
    },
    {
      "category": "mapValues",
      "description": "should map the values of an object",
      "tests": [
        {
          "input": { "a": 2, "b": 3 },
          "query": ["mapValues", ["multiply", ["get"], 2]],
          "output": { "a": 4, "b": 6 }
        }
      ]
    },
    {
      "category": "groupBy",
      "description": "should group items by a key",
      "tests": [
        {
          "input": [
            { "name": "Joe", "city": "New York" },
            { "name": "Oliver", "city": "Amsterdam" },
            { "name": "Sarah", "city": "Amsterdam" }
          ],
          "query": ["groupBy", ["get", "city"]],
          "output": {
            "New York": [{ "name": "Joe", "city": "New York" }],
            "Amsterdam": [
              { "name": "Oliver", "city": "Amsterdam" },
              { "name": "Sarah", "city": "Amsterdam" }
            ]
          }
        }
      ]
    },
    {
      "category": "keyBy",
      "description": "should turn an array in an object by key",
      "tests": [
        {
          "input": [
            { "id": 1, "name": "Joe" },
            { "id": 2, "name": "Oliver" },
            { "id": 3, "name": "Sarah" }
          ],
          "query": ["keyBy", ["get", "id"]],
          "output": {
            "1": { "id": 1, "name": "Joe" },
            "2": { "id": 2, "name": "Oliver" },
            "3": { "id": 3, "name": "Sarah" }
          }
        }
      ]
    },
    {
      "category": "keyBy",
      "description": "should handle duplicate keys in keyBy, keeping the first",
      "tests": [
        {
          "input": [
            { "id": 1, "name": "Joe" },
            { "id": 2, "name": "Oliver" },
            { "id": 1, "name": "Sarah" }
          ],
          "query": ["keyBy", ["get", "id"]],
          "output": {
            "1": { "id": 1, "name": "Joe" },
            "2": { "id": 2, "name": "Oliver" }
          }
        }
      ]
    },
    {
      "category": "keys",
      "description": "should extract the keys of an object",
      "tests": [
        {
          "input": { "a": 2, "b": 3 },
          "query": ["keys"],
          "output": ["a", "b"]
        }
      ]
    },
    {
      "category": "values",
      "description": "should extract the values of an object",
      "tests": [
        {
          "input": { "a": 2, "b": 3 },
          "query": ["values"],
          "output": [2, 3]
        }
      ]
    },
    {
      "category": "flatten",
      "description": "should flatten an array",
      "tests": [
        {
          "input": [[1, 2], [3, 4, 5]],
          "query": ["flatten"],
          "output": [1, 2, 3, 4, 5]
        }
      ]
    },
    {
      "category": "flatten",
      "description": "should not flatten arrays inside arrays",
      "tests": [
        {
          "input": [[1, [2, 3]]],
          "query": ["flatten"],
          "output": [1, [2, 3]]
        }
      ]
    },
    {
      "category": "join",
      "description": "should join an array",
      "tests": [
        {
          "input": ["a", "b", "c"],
          "query": ["join"],
          "output": "abc"
        }
      ]
    },
    {
      "category": "join",
      "description": "should join an array with a custom separator",
      "tests": [
        {
          "input": ["a", "b", "c"],
          "query": ["join", ", "],
          "output": "a, b, c"
        }
      ]
    },
    {
      "category": "split",
      "description": "should split a string",
      "tests": [
        {
          "input": null,
          "query": ["split", "start with a b c"],
          "output": ["start", "with", "a", "b", "c"]
        },
        {
          "input": { "message": "start with a b c" },
          "query": ["split", ["get", "message"]],
          "output": ["start", "with", "a", "b", "c"]
        }
      ]
    },
    {
      "category": "split",
      "description": "should split a string with multiple whitespaces between the words",
      "tests": [
        {
          "input": null,
          "query": ["split", " \n\n\t start   with  a   b \n\r\t  c \n\n\t "],
          "output": ["start", "with", "a", "b", "c"]
        }
      ]
    },
    {
      "category": "split",
      "description": "should split a string by individual characters",
      "tests": [
        {
          "input": null,
          "query": ["split", "abc", ""],
          "output": ["a", "b", "c"]
        }
      ]
    },
    {
      "category": "split",
      "description": "should split a string with a separator",
      "tests": [
        {
          "input": null,
          "query": ["split", "a,b,c", ","],
          "output": ["a", "b", "c"]
        }
      ]
    },
    {
      "category": "substring",
      "description": "should get a substring of a string with a start index",
      "tests": [
        {
          "input": "123456",
          "query": ["substring", ["get"], 3],
          "output": "456"
        }
      ]
    },
    {
      "category": "substring",
      "description": "should get a substring of a string with a start and end index",
      "tests": [
        {
          "input": { "value": "123456" },
          "query": ["substring", ["get", "value"], 2, 4],
          "output": "34"
        }
      ]
    },
    {
      "category": "substring",
      "description": "should get a substring of a string with a start exceeding the string length",
      "tests": [
        {
          "input": null,
          "query": ["substring", "123456", 10],
          "output": ""
        }
      ]
    },
    {
      "category": "substring",
      "description": "should get a substring of a string with an end exceeding the string length",
      "tests": [
        {
          "input": null,
          "query": ["substring", "123456", 0, 10],
          "output": "123456"
        }
      ]
    },
    {
      "category": "substring",
      "description": "should get a substring of a string with an end index smaller than the start index",
      "tests": [
        {
          "input": null,
          "query": ["substring", "123456", 3, 0],
          "output": ""
        }
      ]
    },
    {
      "category": "substring",
      "description": "should get a substring of a string with a negative start index",
      "tests": [
        {
          "input": null,
          "query": ["substring", "123456", -2],
          "output": "123456"
        }
      ]
    },
    {
      "category": "uniq",
      "description": "should get unique values from a list with numbers",
      "tests": [
        {
          "input": [2, 3, 2, 7, 1, 1],
          "query": ["uniq"],
          "output": [2, 3, 7, 1]
        }
      ]
    },
    {
      "category": "uniq",
      "description": "should get unique values from a list with strings",
      "tests": [
        {
          "input": ["hi", "hello", "hi", "HI", "bye", "bye"],
          "query": ["uniq"],
          "output": ["hi", "hello", "HI", "bye"]
        }
      ]
    },
    {
      "category": "uniq",
      "description": "should get unique values from a list objects (deep comparison)",
      "tests": [
        {
          "input": [{ "a": 1, "b": 2 }, { "b": 2 }, { "b": 2, "a": 1 }, [1], [1]],
          "query": ["uniq"],
          "output": [{ "a": 1, "b": 2 }, { "b": 2 }, [1]]
        }
      ]
    },
    {
      "category": "uniqBy",
      "description": "should get unique objects by key (keeping the first)",
      "tests": [
        {
          "input": [
            { "name": "Joe", "city": "New York" },
            { "name": "Oliver", "city": "Amsterdam" },
            { "name": "Sarah", "city": "Amsterdam" }
          ],
          "query": ["uniqBy", ["get", "city"]],
          "output": [
            { "name": "Joe", "city": "New York" },
            { "name": "Oliver", "city": "Amsterdam" }
          ]
        }
      ]
    },
    {
      "category": "limit",
      "description": "should limit an array with numbers",
      "tests": [
        {
          "input": [1, 2, 3, 4, 5],
          "query": ["limit", 3],
          "output": [1, 2, 3]
        }
      ]
    },
    {
      "category": "limit",
      "description": "should limit an array with an index larger than the length of the array",
      "tests": [
        {
          "input": [1, 2, 3],
          "query": ["limit", 10],
          "output": [1, 2, 3]
        }
      ]
    },
    {
      "category": "limit",
      "description": "should limit an array with objects",
      "tests": [
        {
          "input": [
            { "id": 1, "name": "Joe" },
            { "id": 2, "name": "Oliver" },
            { "id": 3, "name": "Sarah" }
          ],
          "query": ["limit", 2],
          "output": [{ "id": 1, "name": "Joe" }, { "id": 2, "name": "Oliver" }]
        }
      ]
    },
    {
      "category": "limit",
      "description": "should return an empty array when limit has a negative value",
      "tests": [
        {
          "input": [1, 2, 3],
          "query": ["limit", -2],
          "output": []
        }
      ]
    },
    {
      "category": "size",
      "description": "should return the size of an array",
      "tests": [
        { "input": [], "query": ["size"], "output": 0 },
        { "input": [1, 2, 3], "query": ["size"], "output": 3 },
        { "input": [{}, {}, {}, {}], "query": ["size"], "output": 4 }
      ]
    },
    {
      "category": "size",
      "description": "should return the size of a string",
      "tests": [{ "input": "12345", "query": ["size"], "output": 5 }]
    },
    {
      "category": "sum",
      "description": "should calculate the sum of an array with integers",
      "tests": [{ "input": [1, 2, 3], "query": ["sum"], "output": 6 }]
    },
    {
      "category": "sum",
      "description": "should calculate the sum of an array with floats",
      "tests": [{ "input": [2.4, 5.7], "query": ["sum"], "output": 8.1 }]
    },
    {
      "category": "sum",
      "description": "should return 0 when calculating the sum of an empty array",
      "tests": [{ "input": [], "query": ["sum"], "output": 0 }]
    },
    {
      "category": "sum",
      "description": "should throw an error when calculating the sum of a string",
      "tests": [
        {
          "input": "abc",
          "query": ["sum"],
          "throws": "Array expected"
        }
      ]
    },
    {
      "category": "min",
      "description": "should calculate the minimum value",
      "tests": [
        {
          "input": [3, -4, 1, -7],
          "query": ["min"],
          "output": -7
        }
      ]
    },
    {
      "category": "min",
      "description": "should return null when calculating min of an empty array",
      "tests": [{ "input": [], "query": ["min"], "output": null }]
    },
    {
      "category": "min",
      "description": "should throw an error when calculating min on a string",
      "tests": [
        {
          "input": "abc",
          "query": ["min"],
          "throws": "Array expected"
        }
      ]
    },
    {
      "category": "max",
      "description": "should calculate the maximum value",
      "tests": [
        {
          "input": [3, -4, 1, -7],
          "query": ["max"],
          "output": 3
        }
      ]
    },
    {
      "category": "max",
      "description": "should return null when calculating max of an empty array",
      "tests": [{ "input": [], "query": ["max"], "output": null }]
    },
    {
      "category": "max",
      "description": "should throw an error when calculating max on a string",
      "tests": [
        {
          "input": "abc",
          "query": ["max"],
          "throws": "Array expected"
        }
      ]
    },
    {
      "category": "prod",
      "description": "should calculate the product",
      "tests": [{ "input": [2, 3, 5], "query": ["prod"], "output": 30 }]
    },
    {
      "category": "prod",
      "description": "should return null when calculating the prod of an empty array",
      "tests": [
        {
          "input": [],
          "query": ["prod"],
          "output": null
        }
      ]
    },
    {
      "category": "prod",
      "description": "should throw an error when calculating the prod of a string",
      "tests": [
        {
          "input": "abc",
          "query": ["prod"],
          "throws": "Array expected"
        }
      ]
    },
    {
      "category": "average",
      "description": "should calculate the average",
      "tests": [
        { "input": [2, 4], "query": ["average"], "output": 3 },
        { "input": [2, 3, 2, 7, 1], "query": ["average"], "output": 3 }
      ]
    },
    {
      "category": "average",
      "description": "should return null when calculating the average of an empty array",
      "tests": [
        {
          "input": [],
          "query": ["average"],
          "output": null
        }
      ]
    },
    {
      "category": "average",
      "description": "should throw an error when calculating the average of a string",
      "tests": [
        {
          "input": "abc",
          "query": ["average"],
          "throws": "Array expected"
        }
      ]
    },
    {
      "category": "eq",
      "description": "should calculate equal",
      "tests": [
        {
          "input": { "a": 1, "b": 2 },
          "query": ["eq", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": 2, "b": 2 },
          "query": ["eq", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 3, "b": 2 },
          "query": ["eq", ["get", "a"], ["get", "b"]],
          "output": false
        },
        { "input": { "a": 0.1 }, "query": ["eq", ["get", "a"], 0.1], "output": true },
        { "input": { "a": 0.1 }, "query": ["eq", ["get", "a"], 0.2], "output": false },
        { "input": { "a": 0.1 }, "query": ["eq", ["get", "a"], -0.1], "output": false },
        { "input": null, "query": ["eq", "a", "a"], "output": true },
        { "input": null, "query": ["eq", "a", "b"], "output": false },
        { "input": null, "query": ["eq", "a", "A"], "output": false },
        { "input": null, "query": ["eq", "abc", "abc"], "output": true },
        { "input": null, "query": ["eq", "abc", "ab"], "output": false },
        { "input": null, "query": ["eq", true, true], "output": true },
        { "input": null, "query": ["eq", true, false], "output": false },
        { "input": null, "query": ["eq", false, true], "output": false },
        { "input": null, "query": ["eq", false, true], "output": false },
        { "input": null, "query": ["eq", null, null], "output": true }
      ]
    },
    {
      "category": "eq",
      "description": "should calculate equal comparing mixed types (no type coercion)",
      "tests": [
        { "input": null, "query": ["eq", "2", 2], "output": false },
        { "input": null, "query": ["eq", "", 0], "output": false },
        { "input": null, "query": ["eq", 0, ""], "output": false },
        { "input": null, "query": ["eq", "", null], "output": false },
        { "input": null, "query": ["eq", null, ""], "output": false },
        { "input": null, "query": ["eq", 0, null], "output": false },
        { "input": null, "query": ["eq", ["array"], null], "output": false },
        { "input": null, "query": ["eq", ["array", 2], 2], "output": false }
      ]
    },
    {
      "category": "eq",
      "description": "should calculate (deep) equal on objects",
      "tests": [
        {
          "input": null,
          "query": ["eq", ["object", { "a": 2, "b": 3 }], ["object", { "b": 3, "a": 2 }]],
          "output": true
        },
        {
          "input": null,
          "query": ["eq", ["object", { "a": 2, "b": 3 }], ["object", { "b": 3, "a": 2, "c": 4 }]],
          "output": false
        },
        {
          "input": null,
          "query": ["eq", ["object", { "a": 2, "b": 3, "c": 4 }], ["object", { "b": 3, "a": 2 }]],
          "output": false
        }
      ]
    },
    {
      "category": "eq",
      "description": "should calculate (deep) equal on arrays",
      "tests": [
        {
          "input": null,
          "query": ["eq", ["array", 1, 2, 3], ["array", 1, 2, 3]],
          "output": true
        },
        {
          "input": null,
          "query": ["eq", ["array", 1, 2], ["array", 1, 2, 3]],
          "output": false
        },
        {
          "input": null,
          "query": ["eq", ["array", 1, 2, 3], ["array", 1, 2]],
          "output": false
        }
      ]
    },
    {
      "category": "eq",
      "description": "should calculate (deep) equal on nested objects and arrays",
      "tests": [
        {
          "input": null,
          "query": [
            "eq",
            ["object", { "arr": ["array", 1, 2, 3] }],
            ["object", { "arr": ["array", 1, 2, 3] }]
          ],
          "output": true
        },
        {
          "input": null,
          "query": [
            "eq",
            ["object", { "arr": ["array", 1, 2] }],
            ["object", { "arr": ["array", 1, 2, 3] }]
          ],
          "output": false
        }
      ]
    },
    {
      "category": "gt",
      "description": "should calculate greater than",
      "tests": [
        {
          "input": { "a": 1, "b": 2 },
          "query": ["gt", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": 2, "b": 2 },
          "query": ["gt", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": 3, "b": 2 },
          "query": ["gt", ["get", "a"], ["get", "b"]],
          "output": true
        },
        { "input": null, "query": ["gt", 3, 2], "output": true }
      ]
    },
    {
      "category": "gt",
      "description": "should calculate greater than for strings",
      "tests": [
        { "input": null, "query": ["gt", "abd", "abc"], "output": true },
        { "input": null, "query": ["gt", "abc", "abc"], "output": false },
        { "input": null, "query": ["gt", "abcd", "abc"], "output": true },
        { "input": null, "query": ["gt", "A", "a"], "output": false },
        { "input": null, "query": ["gt", "20", "3"], "output": false }
      ]
    },
    {
      "category": "gt",
      "description": "should calculate greater than for booleans",
      "tests": [
        { "input": null, "query": ["gt", true, true], "output": false },
        { "input": null, "query": ["gt", true, false], "output": true },
        { "input": null, "query": ["gt", false, true], "output": false },
        { "input": null, "query": ["gt", false, false], "output": false }
      ]
    },
    {
      "category": "gt",
      "description": "should return false when calculating greater than with mixed data types",
      "tests": [{ "input": null, "query": ["gt", "3", 2], "output": false }]
    },
    {
      "category": "gt",
      "description": "should return false when calculating greater than with an unsupported data type",
      "tests": [
        { "input": null, "query": ["gt", 2, ["array", 1, 2, 3]], "output": false },
        { "input": null, "query": ["gt", ["array", 1, 2, 4], ["array", 1, 2, 3]], "output": false },
        { "input": null, "query": ["gt", 2, ["object", { "a": 1 }]], "output": false }
      ]
    },
    {
      "category": "gte",
      "description": "should calculate greater than or equal to",
      "tests": [
        {
          "input": { "a": 1, "b": 2 },
          "query": ["gte", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": 2, "b": 2 },
          "query": ["gte", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 3, "b": 2 },
          "query": ["gte", ["get", "a"], ["get", "b"]],
          "output": true
        },
        { "input": null, "query": ["gte", 3, 2], "output": true }
      ]
    },
    {
      "category": "gte",
      "description": "should calculate greater than or equal to for strings",
      "tests": [
        { "input": null, "query": ["gte", "abd", "abc"], "output": true },
        { "input": null, "query": ["gte", "abc", "abc"], "output": true },
        { "input": null, "query": ["gte", "abcd", "abc"], "output": true },
        { "input": null, "query": ["gte", "A", "a"], "output": false },
        { "input": null, "query": ["gte", "20", "3"], "output": false }
      ]
    },
    {
      "category": "gte",
      "description": "should calculate greater than or equal for booleans",
      "tests": [
        { "input": null, "query": ["gte", true, true], "output": true },
        { "input": null, "query": ["gte", true, false], "output": true },
        { "input": null, "query": ["gte", false, true], "output": false },
        { "input": null, "query": ["gte", false, false], "output": true }
      ]
    },
    {
      "category": "gte",
      "description": "should return false when calculating greater than or equal to with mixed data types",
      "tests": [{ "input": null, "query": ["gte", "3", 2], "output": false }]
    },
    {
      "category": "gte",
      "description": "should return false when calculating greater than or equal to with an unsupported data type",
      "tests": [
        { "input": null, "query": ["gte", 2, ["array", 1, 2, 3]], "output": false },
        {
          "input": null,
          "query": ["gte", ["array", 1, 2, 4], ["array", 1, 2, 3]],
          "output": false
        },
        { "input": null, "query": ["gte", 2, ["object", { "a": 1 }]], "output": false }
      ]
    },
    {
      "category": "lt",
      "description": "should calculate less than",
      "tests": [
        {
          "input": { "a": 1, "b": 2 },
          "query": ["lt", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 2, "b": 2 },
          "query": ["lt", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": 3, "b": 2 },
          "query": ["lt", ["get", "a"], ["get", "b"]],
          "output": false
        },
        { "input": null, "query": ["lt", 1, 2], "output": true }
      ]
    },
    {
      "category": "lt",
      "description": "should calculate less than for strings",
      "tests": [
        { "input": null, "query": ["lt", "abc", "abd"], "output": true },
        { "input": null, "query": ["lt", "abc", "abc"], "output": false },
        { "input": null, "query": ["lt", "abc", "abcd"], "output": true },
        { "input": null, "query": ["lt", "a", "A"], "output": false },
        { "input": null, "query": ["lt", "3", "20"], "output": false }
      ]
    },
    {
      "category": "lt",
      "description": "should calculate less than for booleans",
      "tests": [
        { "input": null, "query": ["lt", true, true], "output": false },
        { "input": null, "query": ["lt", true, false], "output": false },
        { "input": null, "query": ["lt", false, true], "output": true },
        { "input": null, "query": ["lt", false, false], "output": false }
      ]
    },
    {
      "category": "lt",
      "description": "should return false when calculating less than with mixed data types",
      "tests": [{ "input": null, "query": ["lt", 2, "3"], "output": false }]
    },
    {
      "category": "lt",
      "description": "should return false when calculating less than with an unsupported data type",
      "tests": [
        { "input": null, "query": ["lt", 2, ["array", 1, 2, 3]], "output": false },
        { "input": null, "query": ["lt", ["array", 1, 2, 4], ["array", 1, 2, 3]], "output": false },
        { "input": null, "query": ["lt", 2, ["object", { "a": 1 }]], "output": false }
      ]
    },
    {
      "category": "lte",
      "description": "should calculate less than or equal to",
      "tests": [
        {
          "input": { "a": 1, "b": 2 },
          "query": ["lte", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 2, "b": 2 },
          "query": ["lte", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 3, "b": 2 },
          "query": ["lte", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": null,
          "query": ["lte", 2, 2],
          "output": true
        }
      ]
    },
    {
      "category": "lte",
      "description": "should calculate less than or equal to for strings",
      "tests": [
        { "input": null, "query": ["lte", "abc", "abd"], "output": true },
        { "input": null, "query": ["lte", "abc", "abc"], "output": true },
        { "input": null, "query": ["lte", "abc", "abcd"], "output": true },
        { "input": null, "query": ["lte", "a", "A"], "output": false },
        { "input": null, "query": ["lte", "3", "20"], "output": false }
      ]
    },
    {
      "category": "lte",
      "description": "should calculate less than or equal for booleans",
      "tests": [
        { "input": null, "query": ["lte", true, true], "output": true },
        { "input": null, "query": ["lte", true, false], "output": false },
        { "input": null, "query": ["lte", false, true], "output": true },
        { "input": null, "query": ["lte", false, false], "output": true }
      ]
    },
    {
      "category": "lte",
      "description": "should return false when calculating less than or equal to with mixed data types",
      "tests": [{ "input": null, "query": ["lte", "3", 2], "output": false }]
    },
    {
      "category": "lte",
      "description": "should return false when calculating less than or equal to with an unsupported data type",
      "tests": [
        { "input": null, "query": ["lte", 2, ["array", 1, 2, 3]], "output": false },
        {
          "input": null,
          "query": ["lte", ["array", 1, 2, 4], ["array", 1, 2, 3]],
          "output": false
        },
        { "input": null, "query": ["lte", 2, ["object", { "a": 1 }]], "output": false }
      ]
    },
    {
      "category": "ne",
      "description": "should calculate not equal",
      "tests": [
        {
          "input": { "a": 1, "b": 2 },
          "query": ["ne", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 2, "b": 2 },
          "query": ["ne", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": 3, "b": 2 },
          "query": ["ne", ["get", "a"], ["get", "b"]],
          "output": true
        },
        { "input": null, "query": ["ne", 3, 2], "output": true }
      ]
    },
    {
      "category": "ne",
      "description": "should calculate not equal comparing mixed types (no type coercion)",
      "tests": [
        { "input": null, "query": ["ne", "2", 2], "output": true },
        { "input": null, "query": ["ne", "", 0], "output": true },
        { "input": null, "query": ["ne", "", null], "output": true },
        { "input": null, "query": ["ne", 0, null], "output": true },
        { "input": null, "query": ["ne", ["array", 2], 2], "output": true }
      ]
    },
    {
      "category": "ne",
      "description": "should calculate (deep) not equal on objects",
      "tests": [
        {
          "input": null,
          "query": ["ne", ["object", { "a": 2, "b": 3 }], ["object", { "b": 3, "a": 2 }]],
          "output": false
        },
        {
          "input": null,
          "query": ["ne", ["object", { "a": 2, "b": 3 }], ["object", { "b": 3, "a": 2, "c": 4 }]],
          "output": true
        },
        {
          "input": null,
          "query": ["ne", ["object", { "a": 2, "b": 3, "c": 4 }], ["object", { "b": 3, "a": 2 }]],
          "output": true
        }
      ]
    },
    {
      "category": "ne",
      "description": "should calculate (deep) not equal on arrays",
      "tests": [
        { "input": null, "query": ["ne", ["array", 1, 2, 3], ["array", 1, 2, 3]], "output": false },
        { "input": null, "query": ["ne", ["array", 1, 2], ["array", 1, 2, 3]], "output": true },
        { "input": null, "query": ["ne", ["array", 1, 2, 3], ["array", 1, 2]], "output": true }
      ]
    },
    {
      "category": "ne",
      "description": "should calculate (deep) not equal on nested objects and arrays",
      "tests": [
        {
          "input": null,
          "query": [
            "ne",
            ["object", { "arr": ["array", 1, 2, 3] }],
            ["object", { "arr": ["array", 1, 2, 3] }]
          ],
          "output": false
        },
        {
          "input": null,
          "query": [
            "ne",
            ["object", { "arr": ["array", 1, 2] }],
            ["object", { "arr": ["array", 1, 2, 3] }]
          ],
          "output": true
        }
      ]
    },
    {
      "category": "and",
      "description": "should calculate and",
      "tests": [
        {
          "input": { "a": false, "b": false },
          "query": ["and", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": false, "b": true },
          "query": ["and", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": true, "b": false },
          "query": ["and", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": true, "b": true },
          "query": ["and", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 0, "b": 1 },
          "query": ["and", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": 1, "b": 1 },
          "query": ["and", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": null,
          "query": ["and", true, true],
          "output": true
        }
      ]
    },
    {
      "category": "and",
      "description": "should calculate and with more than two arguments",
      "tests": [
        {
          "input": null,
          "query": ["and", true, true, false],
          "output": false
        }
      ]
    },
    {
      "category": "and",
      "description": "should calculate and with one argument",
      "tests": [
        { "input": null, "query": ["and", false], "output": false },
        { "input": null, "query": ["and", true], "output": true }
      ]
    },
    {
      "category": "and",
      "description": "should return null calculating and with no arguments",
      "tests": [
        {
          "input": null,
          "query": ["and"],
          "output": null
        }
      ]
    },
    {
      "category": "or",
      "description": "should calculate or",
      "tests": [
        {
          "input": { "a": false, "b": false },
          "query": ["or", ["get", "a"], ["get", "b"]],
          "output": false
        },
        {
          "input": { "a": false, "b": true },
          "query": ["or", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": true, "b": false },
          "query": ["or", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": true, "b": true },
          "query": ["or", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 0, "b": 1 },
          "query": ["or", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": { "a": 1, "b": 1 },
          "query": ["or", ["get", "a"], ["get", "b"]],
          "output": true
        },
        {
          "input": null,
          "query": ["or", false, true],
          "output": true
        }
      ]
    },
    {
      "category": "or",
      "description": "should calculate or with more than two arguments",
      "tests": [
        {
          "input": null,
          "query": ["or", false, false, true],
          "output": true
        }
      ]
    },
    {
      "category": "or",
      "description": "should calculate or with one argument",
      "tests": [
        { "input": null, "query": ["or", false], "output": false },
        { "input": null, "query": ["or", true], "output": true }
      ]
    },
    {
      "category": "or",
      "description": "should return null when calculating or with no arguments",
      "tests": [
        {
          "input": null,
          "query": ["or"],
          "output": null
        }
      ]
    },
    {
      "category": "not",
      "description": "should calculate not",
      "tests": [
        { "input": { "a": false }, "query": ["not", ["get", "a"]], "output": true },
        { "input": { "a": true }, "query": ["not", ["get", "a"]], "output": false },
        { "input": null, "query": ["not", true], "output": false },
        { "input": { "a": 1 }, "query": ["not", ["get", "a"]], "output": false },
        { "input": { "a": 0 }, "query": ["not", ["get", "a"]], "output": true }
      ]
    },
    {
      "category": "exists",
      "description": "should calculate exists",
      "tests": [
        { "input": { "a": false }, "query": ["exists", ["get", "a"]], "output": true },
        { "input": { "a": null }, "query": ["exists", ["get", "a"]], "output": true },
        { "input": { "a": 2 }, "query": ["exists", ["get", "a"]], "output": true },
        { "input": { "a": 0 }, "query": ["exists", ["get", "a"]], "output": true },
        { "input": { "a": "" }, "query": ["exists", ["get", "a"]], "output": true },
        {
          "input": { "nested": { "a": 2 } },
          "query": ["exists", ["get", "nested", "a"]],
          "output": true
        },
        { "input": {}, "query": ["exists", ["get", "a"]], "output": false },
        { "input": {}, "query": ["exists", ["get", "nested", "a"]], "output": false },
        { "input": {}, "query": ["exists", ["get", "sort"]], "output": false }
      ]
    },
    {
      "category": "if",
      "description": "should calculate if",
      "tests": [
        {
          "input": {
            "status": true,
            "messageOk": "Welcome!",
            "messageFail": "Sorry, you're too young"
          },
          "query": ["if", ["get", "status"], ["get", "messageOk"], ["get", "messageFail"]],
          "output": "Welcome!"
        },
        { "input": null, "query": ["if", true, true, false], "output": true },
        { "input": null, "query": ["if", false, true, false], "output": false },
        { "input": null, "query": ["if", 1, true, false], "output": true },
        { "input": null, "query": ["if", 0, true, false], "output": false },
        { "input": null, "query": ["if", "message", true, false], "output": true },
        { "input": null, "query": ["if", "", true, false], "output": true },
        { "input": null, "query": ["if", null, true, false], "output": false }
      ]
    },
    {
      "category": "in",
      "description": "should calculate in",
      "tests": [
        {
          "input": { "score": 5 },
          "query": ["in", ["get", "score"], ["array", 1, 2, 5, 8]],
          "output": true
        },
        {
          "input": { "score": 7 },
          "query": ["in", ["get", "score"], ["array", 1, 2, 5, 8]],
          "output": false
        },
        {
          "input": null,
          "query": ["in", 5, ["array", 1, 2, 5, 8]],
          "output": true
        }
      ]
    },
    {
      "category": "in",
      "description": "should calculate in finding a string",
      "tests": [
        { "input": null, "query": ["in", "b", ["array", "a", "b", "c"]], "output": true },
        { "input": null, "query": ["in", "d", ["array", "a", "b", "c"]], "output": false },
        { "input": null, "query": ["in", "A", ["array", "a", "b", "c"]], "output": false }
      ]
    },
    {
      "category": "in",
      "description": "should calculate in finding an object",
      "tests": [
        {
          "input": null,
          "query": [
            "in",
            ["object", { "a": 1, "b": 2 }],
            [
              "array",
              ["object", { "b": 2 }],
              ["object", { "a": 1 }],
              ["object", { "a": 1, "b": 2 }]
            ]
          ],
          "output": true
        }
      ]
    },
    {
      "category": "in",
      "description": "should calculate in finding an object",
      "tests": [
        {
          "input": null,
          "query": [
            "in",
            ["object", { "a": 1, "b": 3 }],
            [
              "array",
              ["object", { "b": 2 }],
              ["object", { "a": 1 }],
              ["object", { "a": 1, "b": 2 }]
            ]
          ],
          "output": false
        }
      ]
    },
    {
      "category": "not in",
      "description": "should calculate not in",
      "tests": [
        {
          "input": { "score": 5 },
          "query": ["not in", ["get", "score"], ["array", 1, 2, 5, 8]],
          "output": false
        },
        {
          "input": { "score": 7 },
          "query": ["not in", ["get", "score"], ["array", 1, 2, 5, 8]],
          "output": true
        },
        {
          "input": null,
          "query": ["not in", 7, ["array", 1, 2, 5, 8]],
          "output": true
        }
      ]
    },
    {
      "category": "not in",
      "description": "should calculate not in finding a string",
      "tests": [
        { "input": null, "query": ["not in", "b", ["array", "a", "b", "c"]], "output": false },
        { "input": null, "query": ["not in", "d", ["array", "a", "b", "c"]], "output": true },
        { "input": null, "query": ["not in", "A", ["array", "a", "b", "c"]], "output": true }
      ]
    },
    {
      "category": "not in",
      "description": "should calculate not in finding an object",
      "tests": [
        {
          "input": null,
          "query": [
            "not in",
            ["object", { "a": 1, "b": 2 }],
            [
              "array",
              ["object", { "b": 2 }],
              ["object", { "a": 1 }],
              ["object", { "a": 1, "b": 2 }]
            ]
          ],
          "output": false
        }
      ]
    },
    {
      "category": "not in",
      "description": "should calculate not in finding an object",
      "tests": [
        {
          "input": null,
          "query": [
            "not in",
            ["object", { "a": 1, "b": 3 }],
            [
              "array",
              ["object", { "b": 2 }],
              ["object", { "a": 1 }],
              ["object", { "a": 1, "b": 2 }]
            ]
          ],
          "output": true
        }
      ]
    },
    {
      "category": "regex",
      "description": "should calculate a regex without flags",
      "tests": [
        {
          "input": [{ "name": "Joe" }, { "name": "Oliver42" }, { "name": "Sarah" }],
          "query": ["filter", ["regex", ["get", "name"], "^[A-z]{2,4}$"]],
          "output": [{ "name": "Joe" }]
        }
      ]
    },
    {
      "category": "regex",
      "description": "should calculate a regex with flags",
      "tests": [
        {
          "input": [{ "name": "Joe" }, { "name": "Oliver42" }, { "name": "Sarah" }],
          "query": ["filter", ["regex", ["get", "name"], "^[a-z]+$", "i"]],
          "output": [{ "name": "Joe" }, { "name": "Sarah" }]
        }
      ]
    },
    {
      "category": "regex",
      "description": "should calculate a regex with a static text",
      "tests": [
        {
          "input": null,
          "query": ["regex", "Joe", "^[A-z]+$"],
          "output": true
        }
      ]
    },
    {
      "category": "add",
      "description": "should add two properties",
      "tests": [
        {
          "input": { "a": 6, "b": 2 },
          "query": ["add", ["get", "a"], ["get", "b"]],
          "output": 8
        }
      ]
    },
    {
      "category": "add",
      "description": "should add two numbers",
      "tests": [{ "input": null, "query": ["add", 6, 2], "output": 8 }]
    },
    {
      "category": "add",
      "description": "should concatenate two strings",
      "tests": [
        {
          "input": null,
          "query": ["add", "a", "b"],
          "output": "ab"
        }
      ]
    },
    {
      "category": "add",
      "description": "should concatenate a string and a number",
      "tests": [
        {
          "input": null,
          "query": ["add", "a", 2],
          "output": "a2"
        }
      ]
    },
    {
      "category": "add",
      "description": "should concatenate a number and a string",
      "tests": [
        {
          "input": null,
          "query": ["add", 2, "a"],
          "output": "2a"
        }
      ]
    },
    {
      "category": "add",
      "description": "should concatenate a string and a boolean",
      "tests": [
        {
          "input": null,
          "query": ["add", "is:", true],
          "output": "is:true"
        }
      ]
    },
    {
      "category": "subtract",
      "description": "should subtract two properties",
      "tests": [
        {
          "input": { "a": 6, "b": 2 },
          "query": ["subtract", ["get", "a"], ["get", "b"]],
          "output": 4
        }
      ]
    },
    {
      "category": "subtract",
      "description": "should subtract two numbers",
      "tests": [
        {
          "input": null,
          "query": ["subtract", 6, 2],
          "output": 4
        }
      ]
    },
    {
      "category": "multiply",
      "description": "should multiply two properties",
      "tests": [
        {
          "input": { "a": 6, "b": 2 },
          "query": ["multiply", ["get", "a"], ["get", "b"]],
          "output": 12
        }
      ]
    },
    {
      "category": "multiply",
      "description": "should multiply two numbers",
      "tests": [
        {
          "input": null,
          "query": ["multiply", 6, 2],
          "output": 12
        }
      ]
    },
    {
      "category": "divide",
      "description": "should divide two properties",
      "tests": [
        {
          "input": { "a": 6, "b": 2 },
          "query": ["divide", ["get", "a"], ["get", "b"]],
          "output": 3
        }
      ]
    },
    {
      "category": "divide",
      "description": "should divide two numbers",
      "tests": [
        {
          "input": null,
          "query": ["divide", 6, 2],
          "output": 3
        }
      ]
    },
    {
      "category": "pow",
      "description": "should calculate the exponent of two properties",
      "tests": [
        {
          "input": { "a": 6, "b": 2 },
          "query": ["pow", ["get", "a"], ["get", "b"]],
          "output": 36
        }
      ]
    },
    {
      "category": "pow",
      "description": "should calculate the exponent of two numbers",
      "tests": [{ "input": null, "query": ["pow", 6, 2], "output": 36 }]
    },
    {
      "category": "pow",
      "description": "should calculate the square root using pow",
      "tests": [
        {
          "input": 25,
          "query": ["pow", ["get"], 0.5],
          "output": 5
        }
      ]
    },
    {
      "category": "mod",
      "description": "should calculate the remainder (the modulus) of two properties",
      "tests": [
        {
          "input": { "a": 8, "b": 3 },
          "query": ["mod", ["get", "a"], ["get", "b"]],
          "output": 2
        }
      ]
    },
    {
      "category": "mod",
      "description": "should calculate the remainder (the modulus) of two numbers",
      "tests": [{ "input": null, "query": ["mod", 8, 3], "output": 2 }]
    },
    {
      "category": "abs",
      "description": "should calculate the absolute value",
      "tests": [
        { "input": { "a": -3 }, "query": ["abs", ["get", "a"]], "output": 3 },
        { "input": { "a": 3 }, "query": ["abs", ["get", "a"]], "output": 3 },
        { "input": null, "query": ["abs", -5], "output": 5 }
      ]
    },
    {
      "category": "round",
      "description": "should round a property",
      "tests": [
        { "input": { "a": 23.1345 }, "query": ["round", ["get", "a"]], "output": 23 },
        { "input": { "a": 23.761 }, "query": ["round", ["get", "a"]], "output": 24 }
      ]
    },
    {
      "category": "round",
      "description": "should round a property to two digits",
      "tests": [
        {
          "input": { "a": 23.1348 },
          "query": ["round", ["get", "a"], 2],
          "output": 23.13
        }
      ]
    },
    {
      "category": "round",
      "description": "should round a property to three digits",
      "tests": [
        {
          "input": { "a": 23.1348 },
          "query": ["round", ["get", "a"], 3],
          "output": 23.135
        }
      ]
    },
    {
      "category": "round",
      "description": "should round a number to two digits",
      "tests": [
        {
          "input": null,
          "query": ["round", 23.1348, 2],
          "output": 23.13
        }
      ]
    },
    {
      "category": "number",
      "description": "should convert a string into a number",
      "tests": [
        { "input": "2.3", "query": ["number", ["get"]], "output": 2.3 },
        { "input": "-2.3e-4", "query": ["number", ["get"]], "output": -2.3e-4 },
        { "input": "-2.3E+4", "query": ["number", ["get"]], "output": -2.3e4 },
        { "input": "1e4", "query": ["number", ["get"]], "output": 1e4 }
      ]
    },
    {
      "category": "number",
      "description": "should convert a string containing padding into a number",
      "tests": [
        {
          "input": "  123  ",
          "query": ["number", ["get"]],
          "output": 123
        }
      ]
    },
    {
      "category": "number",
      "description": "should convert a string null when it doesn't contain a valid numeric value",
      "tests": [
        { "input": "  foo  ", "query": ["number", ["get"]], "output": null },
        { "input": "2.4 foo", "query": ["number", ["get"]], "output": null }
      ]
    },
    {
      "category": "string",
      "description": "should convert a number into a string",
      "tests": [
        { "input": 2.4, "query": ["string", ["get"]], "output": "2.4" },
        { "input": -24000, "query": ["string", ["get"]], "output": "-24000" }
      ]
    },
    {
      "category": "string",
      "description": "should convert a boolean into a string",
      "tests": [
        { "input": false, "query": ["string", ["get"]], "output": "false" },
        { "input": true, "query": ["string", ["get"]], "output": "true" }
      ]
    },
    {
      "category": "string",
      "description": "should convert null into a string",
      "tests": [
        {
          "input": null,
          "query": ["string", ["get"]],
          "output": "null"
        }
      ]
    },
    {
      "category": "string",
      "description": "should convert a string into a string",
      "tests": [
        {
          "input": "Hi",
          "query": ["string", ["get"]],
          "output": "Hi"
        }
      ]
    },
    {
      "category": "composed query",
      "description": "should filter using and, gte, and lte",
      "tests": [
        {
          "input": [
            { "age": 23 },
            { "age": 19 },
            { "age": 32 },
            { "age": 19 },
            { "age": 27 },
            { "age": 45 },
            { "age": 31 },
            { "age": 25 }
          ],
          "query": ["filter", ["and", ["gte", ["get", "age"], 23], ["lte", ["get", "age"], 27]]],
          "output": [{ "age": 23 }, { "age": 27 }, { "age": 25 }]
        }
      ]
    },
    {
      "category": "composed query",
      "description": "should create an object containing pipelines and various functions",
      "tests": [
        {
          "input": [
            { "name": "Chris", "age": 23, "city": "New York" },
            { "name": "Emily", "age": 19, "city": "Atlanta" },
            { "name": "Joe", "age": 32, "city": "New York" },
            { "name": "Kevin", "age": 19, "city": "Atlanta" },
            { "name": "Michelle", "age": 27, "city": "Los Angeles" },
            { "name": "Robert", "age": 45, "city": "Manhattan" },
            { "name": "Sarah", "age": 31, "city": "New York" }
          ],
          "query": [
            "object",
            {
              "names": ["map", ["get", "name"]],
              "count": ["size"],
              "averageAge": ["pipe", ["map", ["get", "age"]], ["average"]]
            }
          ],
          "output": {
            "names": ["Chris", "Emily", "Joe", "Kevin", "Michelle", "Robert", "Sarah"],
            "count": 7,
            "averageAge": 28
          }
        }
      ]
    },
    {
      "category": "composed query",
      "description": "should process multiple operations",
      "tests": [
        {
          "input": {
            "friends": [
              { "name": "Chris", "age": 23, "city": "New York" },
              { "name": "Emily", "age": 19, "city": "Atlanta" },
              { "name": "Joe", "age": 32, "city": "New York" },
              { "name": "Kevin", "age": 19, "city": "Atlanta" },
              { "name": "Michelle", "age": 27, "city": "Los Angeles" },
              { "name": "Robert", "age": 45, "city": "Manhattan" },
              { "name": "Sarah", "age": 31, "city": "New York" }
            ]
          },
          "query": [
            "pipe",
            ["get", "friends"],
            ["filter", ["eq", ["get", "city"], "New York"]],
            ["sort", ["get", "age"]],
            ["map", ["get", "name"]],
            ["limit", 2]
          ],
          "output": ["Chris", "Sarah"]
        }
      ]
    },
    {
      "category": "composed query",
      "description": "should use functions to calculate a shopping cart",
      "tests": [
        {
          "input": [
            { "name": "bread", "price": 2.5, "quantity": 2 },
            { "name": "milk", "price": 1.2, "quantity": 3 }
          ],
          "query": ["pipe", ["map", ["multiply", ["get", "price"], ["get", "quantity"]]], ["sum"]],
          "output": 8.6
        }
      ]
    }
  ]
}
